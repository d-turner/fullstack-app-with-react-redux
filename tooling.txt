React => Frontend Framework
Redux => React data control system
Webpack => Component bundler and task runner
Babel => View rules include stage-0
      => Will be using es6 syntax
Eslint => Code style guide and syntax highlighter
Karma + Jasmine + PhantomJS => Testing Framework
Git => Version control
Node.js => Javascript engine
NPM => Package manager
lodash => Extra useful tools
supertest => Testing  tool

Notes:
Seperate data-fetching and rendering i.e. Presentational and Container
Component should be reusable


Containers
Containers fetch and store the data that is required by a Component

Components
Components display data
Components should state what they expect using PropTypes, this is good for Markup
Components should break silently if the data received is not what is expected

// example
```
class CommentListContainer extends React.Component {
  state = { comments: [] };
  componentDidMount() {
    fetchSomeComments(comments =>
      this.setState({ comments: comments }));
  }
  render() {
    return <CommentList comments={this.state.comments} />;
  }
}
```
