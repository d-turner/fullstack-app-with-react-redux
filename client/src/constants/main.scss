@import 'variables';

body {
  font: 100% $font-stack;
  line-height: 1.4em;
  font-size: 1em;
  background-color: $lightsilver;
  font-family: $font-stack;
  height: 100vh;
  *:focus {
    outline: 1px dotted gray;
  }
}

nav {
  display: flex;
  padding: 0 22.4px;
}

ul {
  margin: 0;
}

h1 {
  line-height: 1.4em;
}

h2 {
  line-height: 1.4em;
}

.maxHeight {
  height: 100%
}

.animate {
  -webkit-transition: $mainTransitionTime;
  -moz-transition: $mainTransitionTime;
  -o-transition: $mainTransitionTime;
  transition: $mainTransitionTime;
}

.content {
  padding: $padding-header 0 0;
}

@media only screen and (max-width: 900px) {
  .content {
    padding: 36px 0 0;
  }
}

.setPadding {
  padding-left: $padding-med;
  padding-top: $padding-med;
}

.centerContent {
  padding-left: $padding-med;
  padding-top: $padding-tiny;
}

.parentWidth {
  max-width: 100%; 
}

.fixedWidth {
  resize: vertical;
}

/* Just different types of borders*/
.borderBox {
  border: $borderBox
}

.borderBottom {
  border-style: solid;
  border-color: $bordercolor;
  border-width: 0 0 1px 0;
}

.groupItem {
  padding-left: $padding-tiny;
  padding-bottom: $padding-mini;
}

/* used for making icons inline with  text*/
.fixTop {
  position: relative;
  top: 6px;
}

.fixFont {
  font-size: 1.5em;
}

.textInline {
  display: inline;
}

.fullWidth {
  width: 100%;
}

.clearPadding {
  padding: 0 0 0 0;
}

.clearPaddingBottom {
  padding-bottom: 0;
}

.clearPaddingLeft {
  padding-left: 0;
}

.clearMarginTop {
  margin-top: 0;
}

.clearButton {
  display: block;
  margin: 0;
  margin-bottom: inherit;
  border-radius: 0;
  box-sizing: inherit;
}

.removeButtonStyle, 
.removeButtonStyle:hover {
  box-shadow: none;
  background: none;
  color: inherit;
  border: none;
  padding: 0! important;
  font: inherit;
  cursor: pointer;
  outline: inherit;
}

.removeButtonStyle:active {
  outline: initial !important;
  box-shadow: initial !important;
  background: initial !important;
}

.clearButtonLeft {
  display: block;
  margin: 0;
  margin-bottom: inherit;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0; 
  box-sizing: inherit;
}

.clearButtonRight {
  display: block;
  margin: 0;
  margin-bottom: inherit;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0; 
  box-sizing: inherit;
}

.clearMarginLeft {
  margin-left: 0;
}
.clearMarginRight {
  margin-right: 0;
}

.buttonMargin {
  margin-bottom: 0px;
  margin-right: -1px;
}

.smallMargin{
  margin-right: $margin-small;
}

.paddingInlineWithNavRight {
  padding-right: 0
}

@media (min-width: 1000px) {
  .paddingInlineWithNavRight {
    padding-right: $padding-from-right-nav
  }
}

.whiteBackground {
  background-color: $white;
}

.fixedSmallWidth {
  width: 80px;
}

.buttonList {
  float: left;
  margin-left: -74px;
}

.fixedPosition {
  position: fixed;
}

label > h4 {
  display: inline;
}

.error {
  color: darken($error, 20%);
}

.highlight {
  background-color: $orange;
}

.help {
  font-family: $helpMessageFontFamily;
  color: $helpMessageColor;
  line-height: $helpMessageLineHeight;
  margin: $helpMessageMargin;
  font-size: $helpMessageFontSize;
  white-space: pre-line;
  border-radius: $segmentRadius;
}

.close {
  background: none;
  box-shadow: none;
  float: right;
  color: lighten( #646464, 10%);
  i {
    cursor: pointer;
  }
}

.close:hover {
  box-shadow: none;
}

.close > i:hover {
  color: darken($error, 10%);
}

.message {
  font-family: $messageFontFamily;
  font-size: $messageFontSize;
  line-height: $messageLineHeight;
  background: $messageBackground;
  color: $messageColor;
  padding: $segmentPadding;
  margin: $infoMargin;
  @media (min-width: 500px) {
    margin: $infoMarginSmall;
  }
  border-radius: $segmentRadius;
}

.password_validator {
  position: relative;
  padding: 10px;
  top: 5px;
  left: 0px;
  background-color: $white;
  color: black;

}

/* Icon Buttons */
.button:hover {
  background: $lightsilver;
  i {
    background: $lightsilver;
    border-width: 0 0 1px 0;
    color: #4285f4;
    border-color: #4285f4;
  }

  svg {
    background: $lightsilver;
    path {
      fill: #4285f4;
    }
    border-width: 0 0 1px 0;
    border-color: #4285f4;
  }
}

.button {
  background: $lightsilver;
  color: $icon-color;
  margin-left: 0px;
  margin-top: 5px;
  box-shadow: none !important;
  i {
    border: solid;
    padding-bottom: 6px;
    border-width: 0 0 1px 0;
    border-color: rgba(0, 0, 0, 0.0);
  }
  svg {
    padding-bottom: 0px;
    path {
      fill: $icon-color;
    }
  }
}

.downloadButton {
  background: $lightsilver;
  color: $icon-color;
  margin-left: 0px;
  margin-top: 5px;
  box-shadow: none !important;
  i {
    border: solid;
    padding-bottom: 6px;
    border-width: 0 0 1px 0;
    border-color: rgba(0, 0, 0, 0.0);
  }
}

.downloadButton:hover {
  background: $lightsilver;
  i {
    background: $lightsilver;
    border-width: 0 0 1px 0;
    color: #4285f4;
    border-color: transparent;
  }
}

.arrow_box {
	position: relative;
	background: #ffffff;
	border: 1px solid #c7d6f1;
}
.arrow_box:after, .arrow_box:before {
	right: 100%;
	top: 35%;
	border: solid transparent;
	content: " ";
	height: 0;
	width: 0;
	position: absolute;
	pointer-events: none;
}

.arrow_box:after {
	border-color: rgba(255, 255, 255, 0);
	border-right-color: #ffffff;
	border-width: 15px;
	margin-top: -15px;
}
.arrow_box:before {
	border-color: rgba(199, 214, 241, 0);
	border-right-color: #c7d6f1;
	border-width: 16px;
	margin-top: -16px;
}

.responsiveTable {
  overflow: auto;
}

@media (min-width: 800px) {
  .responsiveTable {
    overflow: auto;
  }
}

/* 
// Code taken from https://codepen.io/vulchivijay/pen/yyxyvB
// all credit to Vijaya Kumar Vulchi
*/
.underline-from-center {
  -webkit-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-osx-font-smoothing: grayscale;
  position: relative;
  overflow: hidden;
  &:before {
    content: "";
    position: absolute;
    z-index: -1;
    left: 50%;
    right: 50%;
    bottom: 0;
    background: #2980b9;
    height: 2px;
    -webkit-transition-property: left right;
    transition-property: left right;
    -webkit-transition-duration: $mainTransitionTime;
    transition-duration: $mainTransitionTime;
    -webkit-transition-timing-function: ease-out;
    transition-timing-function: ease-out;
  }
  &:hover:before {
    left: 0;
    right: 0;
  }
}

.underline-center {
  -webkit-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-osx-font-smoothing: grayscale;
  position: relative;
  overflow: hidden;
  &:before {
    content: "";
    position: absolute;
    z-index: -1;
    left: 50%;
    right: 50%;
    bottom: 0;
    background: #2980b9;
    height: 2px;
    -webkit-transition-property: left right;
    transition-property: left right;
    -webkit-transition-timing-function: ease-out;
    transition-timing-function: ease-out;
  }
  &:before {
    left: 0;
    right: 0;
  }
}

.animate {
  -webkit-transition-duration: $mainTransitionTime;
  transition-duration: $mainTransitionTime;
  -webkit-transition-timing-function: ease-out;
  transition-timing-function: ease-out;
}

.fadeIn {
  -webkit-transition: 0.5s;
  -moz-transition: 0.5s;
  -o-transition: 0.5s;
  transition: 0.5s;
  opacity: 0;
  visibility: hidden; 
}  
.fadeIn.show {
  opacity: 1;
  visibility: visible; 
}

.greenButton {
  color: $acceptColor; 
}

.greenButton:hover {
  i {
    color: $darkAccept;
    border-color: $darkAccept;
  }
}

.redButton {
  color: $rejectColor;
}

.redButton:hover {
  i {
    color: $darkReject;
    border-color: $darkReject;
  }
}

.clickable:hover {
  cursor: pointer;
}

.flex {
  display: flex;
  flex-flow: row wrap;
}

.noBorder {
  border: none;
  outline: none;
}
.noBorder::-moz-focus-inner {
  border: 0;
}
.noBorder:focus {
  border: none;
  outline: none;
}
.noBorder:active {
  border: none;
  outline: none;
}